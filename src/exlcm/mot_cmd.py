"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import exlcm

class mot_cmd(object):

    __slots__ = ["timestamp", "q_tar", "dq_tar", "tau_tar", "q_rec", "dq_rec", "tau_rec", "kp_tar", "kd_tar", "is_enable"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "double", "double", "exlcm.bool"]

    __dimensions__ = [None, [6], [6], [6], [6], [6], [6], None, None, None]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.q_tar = [ 0.0 for dim0 in range(6) ]
        """ LCM Type: double[6] """
        self.dq_tar = [ 0.0 for dim0 in range(6) ]
        """ LCM Type: double[6] """
        self.tau_tar = [ 0.0 for dim0 in range(6) ]
        """ LCM Type: double[6] """
        self.q_rec = [ 0.0 for dim0 in range(6) ]
        """ LCM Type: double[6] """
        self.dq_rec = [ 0.0 for dim0 in range(6) ]
        """ LCM Type: double[6] """
        self.tau_rec = [ 0.0 for dim0 in range(6) ]
        """ LCM Type: double[6] """
        self.kp_tar = 0.0
        """ LCM Type: double """
        self.kd_tar = 0.0
        """ LCM Type: double """
        self.is_enable = exlcm.bool()
        """ LCM Type: exlcm.bool """

    def encode(self):
        buf = BytesIO()
        buf.write(mot_cmd._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>6d', *self.q_tar[:6]))
        buf.write(struct.pack('>6d', *self.dq_tar[:6]))
        buf.write(struct.pack('>6d', *self.tau_tar[:6]))
        buf.write(struct.pack('>6d', *self.q_rec[:6]))
        buf.write(struct.pack('>6d', *self.dq_rec[:6]))
        buf.write(struct.pack('>6d', *self.tau_rec[:6]))
        buf.write(struct.pack(">dd", self.kp_tar, self.kd_tar))
        assert self.is_enable._get_packed_fingerprint() == exlcm.bool._get_packed_fingerprint()
        self.is_enable._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mot_cmd._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mot_cmd._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = mot_cmd()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.q_tar = struct.unpack('>6d', buf.read(48))
        self.dq_tar = struct.unpack('>6d', buf.read(48))
        self.tau_tar = struct.unpack('>6d', buf.read(48))
        self.q_rec = struct.unpack('>6d', buf.read(48))
        self.dq_rec = struct.unpack('>6d', buf.read(48))
        self.tau_rec = struct.unpack('>6d', buf.read(48))
        self.kp_tar, self.kd_tar = struct.unpack(">dd", buf.read(16))
        self.is_enable = exlcm.bool._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if mot_cmd in parents: return 0
        newparents = parents + [mot_cmd]
        tmphash = (0x8477d1ca5ec1e449+ exlcm.bool._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if mot_cmd._packed_fingerprint is None:
            mot_cmd._packed_fingerprint = struct.pack(">Q", mot_cmd._get_hash_recursive([]))
        return mot_cmd._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", mot_cmd._get_packed_fingerprint())[0]

