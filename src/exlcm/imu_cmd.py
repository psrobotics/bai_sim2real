"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class imu_cmd(object):

    __slots__ = ["timestamp", "rpy", "gyro", "acc"]

    __typenames__ = ["int64_t", "double", "double", "double"]

    __dimensions__ = [None, [3], [3], [3]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.rpy = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.gyro = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.acc = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """

    def encode(self):
        buf = BytesIO()
        buf.write(imu_cmd._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>3d', *self.rpy[:3]))
        buf.write(struct.pack('>3d', *self.gyro[:3]))
        buf.write(struct.pack('>3d', *self.acc[:3]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_cmd._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_cmd._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = imu_cmd()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.rpy = struct.unpack('>3d', buf.read(24))
        self.gyro = struct.unpack('>3d', buf.read(24))
        self.acc = struct.unpack('>3d', buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if imu_cmd in parents: return 0
        tmphash = (0x7427a24135a8ee91) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if imu_cmd._packed_fingerprint is None:
            imu_cmd._packed_fingerprint = struct.pack(">Q", imu_cmd._get_hash_recursive([]))
        return imu_cmd._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", imu_cmd._get_packed_fingerprint())[0]

